{"ast":null,"code":"var _jsxFileName = \"/Users/rowanhaver/Development/Web/Projects/movie-streamer-react-website/client/src/routes/Dashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport DashboardNavigation from \"../components/DashboardNavigation/DashboardNavigation\";\nimport ImageSlider from \"../components/ImageSlider/ImageSlider\";\nimport MovieList from \"../components/MovieList/MovieList\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [searchValue, setSearchValue] = useState('');\n\n  const getMovieRequest = async () => {\n    const url = `http://www.omdbapi.com/?apikey=8c41f9b2&s=${searchValue}`;\n    const response = await fetch(url);\n    const responseJson = await response.json();\n    console.log(responseJson);\n    setMovies(responseJson.Search);\n  }; //getMovieRequest function only gets called when the page loads only\n\n\n  useEffect(() => {\n    getMovieRequest();\n  }, [searchValue]); //when the search value changes it calls the useEffect hook\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ImageSlider, {\n      searchValue: searchValue,\n      setSearchValue: setSearchValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n      movies: movies,\n      heading: \"Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Dashboard, \"aSTXR8XMZVbn6R5wRCDzQq5Oi+w=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/rowanhaver/Development/Web/Projects/movie-streamer-react-website/client/src/routes/Dashboard.jsx"],"names":["React","useEffect","useState","DashboardNavigation","ImageSlider","MovieList","Dashboard","movies","setMovies","searchValue","setSearchValue","getMovieRequest","url","response","fetch","responseJson","json","console","log","Search"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,mBAAP,MAAgC,uDAAhC;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AACA,OAAO,sCAAP;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMS,eAAe,GAAG,YAAY;AAChC,UAAMC,GAAG,GAAI,6CAA4CH,WAAY,EAArE;AAEA,UAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,UAAMG,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AACAP,IAAAA,SAAS,CAACO,YAAY,CAACI,MAAd,CAAT;AACH,GARD,CAJoB,CAcpB;;;AACAlB,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,eAAe;AAClB,GAFQ,EAEN,CAACF,WAAD,CAFM,CAAT,CAfoB,CAiBD;;AAEnB,sBAAO;AAAA,4BACC,QAAC,WAAD;AAAa,MAAA,WAAW,EAAEA,WAA1B;AAAuC,MAAA,cAAc,EAAEC;AAAvD;AAAA;AAAA;AAAA;AAAA,YADD,eAEC,QAAC,SAAD;AAAW,MAAA,MAAM,EAAEH,MAAnB;AAA2B,MAAA,OAAO,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAIH,CAvBD;;GAAMD,S;;KAAAA,S;AAyBN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport DashboardNavigation from \"../components/DashboardNavigation/DashboardNavigation\";\nimport ImageSlider from \"../components/ImageSlider/ImageSlider\";\nimport MovieList from \"../components/MovieList/MovieList\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst Dashboard = () => {\n    const [movies, setMovies] = useState([]);\n    const [searchValue, setSearchValue] = useState('');\n\n    const getMovieRequest = async () => {\n        const url = `http://www.omdbapi.com/?apikey=8c41f9b2&s=${searchValue}`;\n\n        const response = await fetch(url);\n        const responseJson = await response.json();\n\n        console.log(responseJson);\n        setMovies(responseJson.Search)\n    }\n\n    //getMovieRequest function only gets called when the page loads only\n    useEffect(() => {\n        getMovieRequest();\n    }, [searchValue]); //when the search value changes it calls the useEffect hook\n\n    return <div>\n            <ImageSlider searchValue={searchValue} setSearchValue={setSearchValue}/>\n            <MovieList movies={movies} heading=\"Movies\"/>\n    </div>\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}